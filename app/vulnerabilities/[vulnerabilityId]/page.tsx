'use client';
import React from "react";
import {Vulnerability} from "../../../typings";
import {ApolloClient, gql, InMemoryCache, useQuery} from "@apollo/client";
import Link from "next/link";
import { Table, Tag, Card, Progress, Slider } from 'antd';

type PageProps = {
    params: {
        vulnerabilityId: string
    }
}

const severityMap = {
    LOW: 0,
    MEDIUM: 5,
    HIGH: 10,
};


const client = new ApolloClient({
    uri: 'http://localhost:3001/graphql',
    cache: new InMemoryCache(),
});


const FETCH_VULNERABILITY = gql`
    query FetchVulnerability($id: ID!) {
        vulnerability(id: $id) {
            id
            severity
            exploitability
            impact
            description
            references {
                url
                tags{
                    name
                }
            }
            publishedDate
            lastModifiedDate
            cweIds {
                id
                bfClasses{
                    name
                }
                operations {
                    name
                }
                phases {
                    name
                }
            }
        }
    }
`;

const getColor = (value) => {
    const hue = ((1 - value) * 120).toString(10);
    return `hsl(${hue}, 100%, 50%)`;
};

const GradientProgress = ({ value }) => {
    const color = getColor(value / 10) || '';

    return (
        <div>
            <div
                style={{
                    background: `linear-gradient(to right, ${color} ${value * 10}%, #f5f5f5 ${value * 10}%)`,
                    height: '10px',
                }}
            />
            <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                <span>0</span>
                <span>{value}</span>
                <span>10</span>
            </div>
        </div>
    );
};


const SeveritySlider = ({ value }) => {
    const marks = {
        0: 'LOW',
        5: 'MEDIUM',
        10: 'HIGH',
    };

    const mappedValue = value ? severityMap[value] : 0;

    return (
        <div>
            <Slider
                min={0}
                max={10}
                marks={marks}
                value={mappedValue}
                tipFormatter={() => value}
                disabled={!value}
            />
        </div>
    );
};

// Separate component for displaying vulnerability details
function VulnerabilityDetails({ vulnerability }) {
    return (
        <div>
            <h2>
                <Link
                    href={`https://nvd.nist.gov/vuln/detail/${vulnerability.id}`}
                    target="_blank"
                    className="text-blue-600 dark:text-blue-500 hover:underline"
                >
                    {vulnerability.id}
                </Link>{' '}
                {vulnerability.description}
            </h2>
            {/* Rest of the vulnerability details */}
            {/* ... */}
        </div>
    );
}

// Separate component for rendering the references table
function ReferencesTable({ references }) {
    return (
        <Table dataSource={references} pagination={false} className="mt-5">
            <Table.Column
                title="Reference"
                dataIndex="url"
                key="url"
                render={(url) => (
                    <a href={url} target="_blank" rel="noopener noreferrer">
                        {url}
                    </a>
                )}
            />
            <Table.Column
                title="Tags"
                dataIndex="tags"
                key="tags"
                render={(tags) => (
                    <>
                        {tags.map((tag, index) => (
                            <Tag color="blue" key={index}>
                                {tag.name}
                            </Tag>
                        ))}
                    </>
                )}
            />
        </Table>
    );
}

function ClassificationDetailsTable({ cweIds }) {
    const dataSource = cweIds.map((cwe) => ({
        cweId: cwe.id,
        bfClasses: cwe.bfClasses?.map((bf) => bf.name),
        bfPhases: cwe.phases?.map((phase) => phase.name),
        bfOperations: cwe.operations?.map((op) => op.name),
    }));

    const columns = [
        {
            title: 'CWE-IDs',
            dataIndex: 'cweId',
            key: 'cweId',
        },
        {
            title: 'BF Classes',
            dataIndex: 'bfClasses',
            key: 'bfClasses',
            render: (bfClasses) => (
                <>
                    {bfClasses?.map((bfClass) => (
                        <Tag key={bfClass} color="geekblue">
                            {bfClass}
                        </Tag>
                    ))}
                </>
            ),
        },
        {
            title: 'BF Phases',
            dataIndex: 'bfPhases',
            key: 'bfPhases',
            render: (bfPhases) => (
                <>
                    {bfPhases?.map((bfPhase) => (
                        <Tag key={bfPhase} color="purple">
                            {bfPhase}
                        </Tag>
                    ))}
                </>
            ),
        },
        {
            title: 'BF Operations',
            dataIndex: 'bfOperations',
            key: 'bfOperations',
            render: (bfOperations) => (
                <>
                    {bfOperations?.map((bfOperation) => (
                        <Tag key={bfOperation} color="cyan">
                            {bfOperation}
                        </Tag>
                    ))}
                </>
            ),
        },
    ];

    return <Table dataSource={dataSource} columns={columns} pagination={false} />;
}

export default function VulnerabilityPage({ params: { vulnerabilityId } }: PageProps) {
    const { loading, error, data } = useQuery(FETCH_VULNERABILITY, {
        client,
        variables: { id: vulnerabilityId },
    });

    if (loading) return <p>Loading...</p>;
    if (error) return <p>Error :(</p>;

    const vuln: Vulnerability = data.vulnerability;

    return (
        <Card className="py-5 px-4 m-2" bordered>
            <VulnerabilityDetails vulnerability={vuln} />

            <div className="d-flex justify-content-between">
                <div className="flex flex-row w-full ">
                    <div className="flex flex-col w-1/3 mr-4">
                        <p>
                            <strong>Severity:</strong>
                            <SeveritySlider value={vuln.severity} />
                        </p>
                    </div>
                    <div className="flex flex-col w-1/3 mr-4">
                        <strong>Impact:</strong>
                        <GradientProgress value={vuln.impact} />
                    </div>
                    <div className="flex flex-col w-1/3">
                        <strong>Exploitability:</strong>
                        <GradientProgress value={vuln.exploitability} />
                    </div>
                </div>
                <div>
                    <ReferencesTable references={vuln.references} />
                </div>
            </div>
            <div className="border-top mt-5">
                <ClassificationDetailsTable cweIds={vuln.cweIds} />
            </div>
        </Card>
    );
}
