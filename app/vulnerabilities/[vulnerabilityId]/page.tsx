import React from "react";
import {Vulnerability} from "../../../typings";
import { ApolloClient, gql, InMemoryCache } from "@apollo/client";
import Link from "next/link";

type PageProps = {
    params: {
        vulnerabilityId: string
    }
}

const fetchVulnerability = async (vulnerabilityId: string) => {
    const client = new ApolloClient({
        uri: `http://localhost:3001/graphql`,
        cache: new InMemoryCache()
    });

    const { data } = await client.query({
        query: gql`
        {
          vulnerabilities(id: "${vulnerabilityId}"){
            id
            severity
            exploitability
            impact
            description
            references {
              url
            }
            publishedDate
            lastModifiedDate
            cweIds {
              id
              operations {
                name
              }
              phases {
                name
              }
            }
          }
        }
        `
    })
    const vuln: Vulnerability = await data.vulnerabilities[0]

    return vuln
}

export default async function CWEPage({ params: { vulnerabilityId } }: PageProps){
    const vuln = await fetchVulnerability(vulnerabilityId)
    console.log(vuln)

    return <div className="py-5 px-4 bg-gray-200 border-2 m-2 text-green-800 shadow-lg">
        <p>
            <Link href={`https://nvd.nist.gov/vuln/detail/${vuln.id}`} target="_blank"
                  className="text-blue-600 dark:text-blue-500 hover:underline" >
                {vuln.id}
            </Link> {vuln.description}
        </p>

        <p>
            Severity: {vuln.severity} | Impact: {vuln.impact} | Exploitability: {vuln.exploitability}
        </p>

        <p>
            References: {vuln.references.map((ref: any) => ref.url).join("\n")}
        </p>

        <div className="border-t border-green mt-5">
            <p>
                CWE-IDs: {vuln.cweIds.map((cwe: any) => cwe.id).join(", ")}
            </p>
            <p>
                BF Classes: {vuln.cweIds.map((cwe: any) => cwe.bfClasses?.map((bf: any) => bf.name).join(", ")).join("|")}
            </p>
            <p>
                BF Phases: {vuln.cweIds.map((cwe: any) => cwe.phases?.map((phase: any) => phase.name).join(", ")).join("|")}
            </p>
            <p>
                BF Operations: {vuln.cweIds.map((cwe: any) => cwe.operations?.map((op: any) => op.name).join(", ")).join("|")}
            </p>
        </div>
    </div>
}
